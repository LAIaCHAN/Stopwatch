C51 COMPILER V9.57.0.0   MAIN                                                              06/22/2024 14:52:43 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\keil5c51\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\mai
                    -n.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

*** WARNING C500 IN LINE 1 OF main.c: LICENSE ERROR (R207(2): REGISTRY READ ERROR)

   1          /*--包含头文件--*/
   2          #include <reg52.h>  // 包含 8052 单片机头文件
   3          
   4          #define GPIO_KEY P3  // 定义按键输入端口
   5          
   6          unsigned char Key_Check(void);  // 声明按键检测函数
   7          unsigned char min, sec, msec;   // 分，秒，毫秒
   8          unsigned char showstr[10] = {"Stop Watch"};  // 显示 Stop Watch
   9          unsigned char showdata[9] = {"00:00:000"};     // 显示的数据
  10          
  11          void Delay_Ms(int);  // 声明延时函数
  12          
  13          #define LCD1602_DB  P0      // LCD1602 数据总线端口
  14          
  15          sbit LCD1602_RS = P2^6;  // LCD1602 RS 位
  16          sbit LCD1602_RW = P2^5;  // LCD1602 RW 位
  17          sbit LCD1602_EN = P2^7;  // LCD1602 EN 位
  18          
  19          // 函数声明
  20          void Read_Busy();               // LCD忙检测函数
  21          void Lcd1602_Write_Cmd(unsigned char cmd);      // LCD写命令
  22          void Lcd1602_Write_Data(unsigned char dat);     // LCD写数据
  23          void LcdSetCursor(unsigned char x, unsigned char y);  // LCD坐标显示
  24          void Lcd1602_Init();            // LCD1602初始化
  25          void DisplayOneChar(unsigned char X, unsigned char Y, unsigned char DData);  // 在LCD上显示一个字符
  26          void Timer_Init(void);  // 定时器初始化
  27          
  28          void main()  
  29          {  
  30   1        unsigned char keynum, i;  // 定义按键值和循环变量
  31   1      
  32   1        Timer_Init();  // 初始化定时器
  33   1        Lcd1602_Init();  // 初始化LCD1602
  34   1      
  35   1        // 在LCD上显示 "Stop Watch"
  36   1        for (i = 0; i < 10; i++)
  37   1          DisplayOneChar(3 + i, 0, showstr[i]);  
  38   1      
  39   1        while(1)
  40   1        {
  41   2          // 按键扫描
  42   2          keynum = Key_Check();
  43   2          
  44   2          if (keynum == 1)
  45   2          {
  46   3            TR0 = 1;  // 启动定时器
  47   3          }
  48   2          else if (keynum == 2)
  49   2          {
  50   3            TR0 = 0;  // 停止定时器
  51   3            showdata[2] = ':';  // 在显示数据中设置冒号
  52   3            showdata[5] = ':';  
  53   3          }
C51 COMPILER V9.57.0.0   MAIN                                                              06/22/2024 14:52:43 PAGE 2   

  54   2          else if (keynum == 3)
  55   2          {
  56   3            TR0 = 0;  // 停止定时器
  57   3            min = 0;  // 复位到00分00秒00
  58   3            sec = 0;
  59   3            msec = 0;
  60   3            showdata[2] = ':';  // 在显示数据中设置冒号
  61   3            showdata[5] = ':';  
  62   3          }
  63   2          
  64   2          // 数据更新
  65   2          showdata[0] = min / 10 + '0';
  66   2          showdata[1] = min % 10 + '0';
  67   2          showdata[3] = sec / 10 + '0';
  68   2          showdata[4] = sec % 10 + '0';
  69   2          showdata[6] = msec / 100 + '0';
  70   2          showdata[7] = msec % 10 + '0';
  71   2          showdata[8] = msec %10+ '0';
  72   2          
  73   2          // 在LCD上显示时间数据
  74   2          for (i = 0; i < 9; i++)
  75   2            DisplayOneChar(4 + i, 1, showdata[i]);            
  76   2        }     
  77   1      }
  78          
  79          void Timer0() interrupt 1       //定时器中断函数 
  80          {    
  81   1          TH0 = 0xfc;   // 设置定时器1的高8位初值，实现定时1ms
  82   1          TL0 = 0x18;   // 设置定时器1的低8位初值
  83   1      
  84   1          if (msec < 999) {
  85   2              msec++; // 毫秒加1
  86   2          } else if (sec < 59) {
  87   2              sec++;  // 秒加1
  88   2              msec = 0; // 毫秒复位为0
  89   2          } else if (min < 59) {
  90   2              min++;  // 分钟加1
  91   2              sec = 0;  // 秒复位为0
  92   2              msec = 0; // 毫秒复位为0
  93   2          } else {
  94   2              TR0 = 0;  // 如果小时达到99时，停止定时器
  95   2          }
  96   1      }
  97          
  98          void Delay_Ms(int m)  // 延时m毫秒
  99          {
 100   1          unsigned char a, b, c;  // 定义三个无符号字符型变量
 101   1      
 102   1          for (c = m; c > 0; c--)  // 外层循环，控制延时的总毫秒数
 103   1              for (b = 242; b > 0; b--)  // 中层循环
 104   1                  for (a = 4; a > 0; a--);  // 内层循环
 105   1      }
 106          
 107          void Read_Busy()           
 108          {
 109   1          unsigned char sta;     // 定义一个无符号字符型变量sta，用于存储LCD状态寄存器的值
 110   1      
 111   1          LCD1602_DB = 0xff;      // 将数据总线置高，准备读取LCD状态
 112   1          LCD1602_RS = 0;         // 将RS（寄存器选择引脚）置低，选择指令寄存器，因为我们要读取的是LCD的状态
 113   1          LCD1602_RW = 1;         // 将RW（读写控制引脚）置高，表示读操作
 114   1      
 115   1          do
C51 COMPILER V9.57.0.0   MAIN                                                              06/22/2024 14:52:43 PAGE 3   

 116   1          {
 117   2              LCD1602_EN = 1;     // 使能，将EN引脚置高，表示启用LCD
 118   2              sta = LCD1602_DB;   // 读取LCD状态寄存器的值，包括忙位（bit 7）
 119   2              LCD1602_EN = 0;     // 使能完毕后，将EN引脚拉低，释放总线
 120   2          } while(sta & 0x80);    // 当LCD处于忙状态时，sta的bit 7（忙位）为1，循环等待忙位为0
 121   1      }
 122          
 123          // LCD写命令
 124          void Lcd1602_Write_Cmd(unsigned char cmd)     
 125          {
 126   1          Read_Busy();            // 调用忙检测函数，确保LCD处于非忙状态
 127   1          LCD1602_RS = 0;         // 将RS引脚置低，选择指令寄存器
 128   1          LCD1602_RW = 0;         // 将RW引脚置低，表示写操作
 129   1          LCD1602_DB = cmd;       // 将命令数据写入数据总线
 130   1          LCD1602_EN = 1;         // 使能，将EN引脚置高，表示启用LCD
 131   1          LCD1602_EN = 0;         // 使能完毕后，将EN引脚拉低，释放总线
 132   1      }
 133          
 134          // LCD写数据
 135          void Lcd1602_Write_Data(unsigned char dat)   
 136          {
 137   1          Read_Busy();            // 调用忙检测函数，确保LCD处于非忙状态
 138   1          LCD1602_RS = 1;         // 将RS引脚置高，选择数据寄存器
 139   1          LCD1602_RW = 0;         // 将RW引脚置低，表示写操作
 140   1          LCD1602_DB = dat;       // 将数据写入数据总线
 141   1          LCD1602_EN = 1;         // 使能，将EN引脚置高，表示启用LCD
 142   1          LCD1602_EN = 0;         // 使能完毕后，将EN引脚拉低，释放总线
 143   1      }
 144          
 145          // 按指定位置显示一个字符
 146          void DisplayOneChar(unsigned char X, unsigned char Y, unsigned char DData)
 147          {
 148   1          Y &= 0x1;               // 将Y与0x1进行按位与操作，确保Y只能取0或1，只能是第一行或第二行
 149   1          X &= 0xF;               // 将X与0xF进行按位与操作，限制X不能大于15
 150   1          if (Y) X |= 0x40;       // 当要显示第二行时，将地址码X加上0x40
 151   1          X |= 0x80;              // 算出指令码，将地址码X加上0x80，显示位置命令格式为1+地址码(0x80+X)
 152   1          Lcd1602_Write_Cmd(X);   // 发送命令字，设置显示位置
 153   1          Lcd1602_Write_Data(DData); // 发送数据，显示字符
 154   1      }
 155          
 156          // LCD1602初始化
 157          void Lcd1602_Init()              
 158          {
 159   1          Lcd1602_Write_Cmd(0x38);    // 打开显示，设置显示模式为5*8点阵，使用8位数据总线
 160   1          Lcd1602_Write_Cmd(0x0c);    // 开启显示，关闭光标，关闭光标闪烁
 161   1          Lcd1602_Write_Cmd(0x06);    // 设置光标移动方向为右，不开启显示移位
 162   1          Lcd1602_Write_Cmd(0x01);    // 清屏
 163   1      }
 164          
 165          // 定时器初始化
 166          void Timer_Init(void)
 167          {
 168   1          TMOD = 0x01;    // 置T0定时工作方式1，使用模式1，16位定时器
 169   1          TH0 = 0xfc;     // T0设置初值，定时10ms，高8位初值
 170   1          TL0 = 0x18;     // T0设置初值，定时10ms，低8位初值
 171   1          ET0 = 1;        // 开T0中断允许，允许T0中断
 172   1          TR0 = 0;        // 默认关闭定时器，先置0，等待需要时再打开
 173   1          EA = 1;         // 打开总中断，允许所有中断
 174   1      }
 175          
 176          unsigned char Key_Check(void)  // 按键检测函数
 177          {
C51 COMPILER V9.57.0.0   MAIN                                                              06/22/2024 14:52:43 PAGE 4   

 178   1          static flag;                    // 静态变量，用于记录按键状态，实现消抖
 179   1          unsigned char KeyValue = 0;    // 按键值初始化为0
 180   1      
 181   1          if ((GPIO_KEY & 0x0f) != 0x0f) // 读取低4位，判断按键是否按下
 182   1          {
 183   2              if (!flag)
 184   2              {
 185   3                  Delay_Ms(10);            // 延时10ms进行消抖
 186   3                  if ((GPIO_KEY & 0x0f) != 0x0f) // 再次检测键盘是否按下
 187   3                  {
 188   4                      flag = 1;          // 设置flag为1，表示按键已经被检测到
 189   4                      switch (GPIO_KEY & 0x0f)
 190   4                      {
 191   5                          case (0x0e): KeyValue = 2; break; // 如果按键是0x0e，设置KeyValue为2
 192   5                          case (0x0d): KeyValue = 1; break; // 如果按键是0x0d，设置KeyValue为1
 193   5                          case (0x0b): KeyValue = 3; break; // 如果按键是0x0b，设置KeyValue为3
 194   5                          case (0x07): KeyValue = 4; break; // 如果按键是0x07，设置KeyValue为4
 195   5                      }
 196   4                  }
 197   3              }
 198   2          }
 199   1          else
 200   1          {
 201   2              flag = 0; // 如果按键没有被按下，将flag重置为0，表示可以进行下一次按键检测
 202   2          }
 203   1      
 204   1          return KeyValue; // 返回按键值
 205   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    441    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     24       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
